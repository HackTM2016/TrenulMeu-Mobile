package ro.trenulmeu.mobile.models;

import ro.trenulmeu.mobile.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TrainAvailability".
 */
public class TrainAvailability {

    private Long id;
    private Long TrainId;
    private java.util.Date From;
    private java.util.Date To;
    private String Days;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TrainAvailabilityDao myDao;

    private Train Train;
    private Long Train__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TrainAvailability() {
    }

    public TrainAvailability(Long id) {
        this.id = id;
    }

    public TrainAvailability(Long id, Long TrainId, java.util.Date From, java.util.Date To, String Days) {
        this.id = id;
        this.TrainId = TrainId;
        this.From = From;
        this.To = To;
        this.Days = Days;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTrainAvailabilityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getTrainId() {
        return TrainId;
    }

    public void setTrainId(Long TrainId) {
        this.TrainId = TrainId;
    }

    public java.util.Date getFrom() {
        return From;
    }

    public void setFrom(java.util.Date From) {
        this.From = From;
    }

    public java.util.Date getTo() {
        return To;
    }

    public void setTo(java.util.Date To) {
        this.To = To;
    }

    public String getDays() {
        return Days;
    }

    public void setDays(String Days) {
        this.Days = Days;
    }

    /** To-one relationship, resolved on first access. */
    public Train getTrain() {
        Long __key = this.TrainId;
        if (Train__resolvedKey == null || !Train__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainDao targetDao = daoSession.getTrainDao();
            Train TrainNew = targetDao.load(__key);
            synchronized (this) {
                Train = TrainNew;
            	Train__resolvedKey = __key;
            }
        }
        return Train;
    }

    public void setTrain(Train Train) {
        synchronized (this) {
            this.Train = Train;
            TrainId = Train == null ? null : Train.getId();
            Train__resolvedKey = TrainId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
