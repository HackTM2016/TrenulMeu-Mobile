package ro.trenulmeu.mobile.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import ro.trenulmeu.mobile.models.TrainAvailability;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TrainAvailability".
*/
public class TrainAvailabilityDao extends AbstractDao<TrainAvailability, Long> {

    public static final String TABLENAME = "TrainAvailability";

    /**
     * Properties of entity TrainAvailability.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "Id");
        public final static Property TrainId = new Property(1, Long.class, "TrainId", false, "TrainId");
        public final static Property From = new Property(2, java.util.Date.class, "From", false, "From");
        public final static Property To = new Property(3, java.util.Date.class, "To", false, "To");
        public final static Property Days = new Property(4, String.class, "Days", false, "Days");
    };

    private DaoSession daoSession;

    private Query<TrainAvailability> train_AvailabilityQuery;

    public TrainAvailabilityDao(DaoConfig config) {
        super(config);
    }
    
    public TrainAvailabilityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TrainAvailability\" (" + //
                "\"Id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TrainId\" INTEGER," + // 1: TrainId
                "\"From\" INTEGER," + // 2: From
                "\"To\" INTEGER," + // 3: To
                "\"Days\" TEXT);"); // 4: Days
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TrainAvailability\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrainAvailability entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long TrainId = entity.getTrainId();
        if (TrainId != null) {
            stmt.bindLong(2, TrainId);
        }
 
        java.util.Date From = entity.getFrom();
        if (From != null) {
            stmt.bindLong(3, From.getTime());
        }
 
        java.util.Date To = entity.getTo();
        if (To != null) {
            stmt.bindLong(4, To.getTime());
        }
 
        String Days = entity.getDays();
        if (Days != null) {
            stmt.bindString(5, Days);
        }
    }

    @Override
    protected void attachEntity(TrainAvailability entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrainAvailability readEntity(Cursor cursor, int offset) {
        TrainAvailability entity = new TrainAvailability( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // TrainId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // From
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // To
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Days
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrainAvailability entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrainId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFrom(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTo(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDays(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrainAvailability entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrainAvailability entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Availability" to-many relationship of Train. */
    public List<TrainAvailability> _queryTrain_Availability(Long TrainId) {
        synchronized (this) {
            if (train_AvailabilityQuery == null) {
                QueryBuilder<TrainAvailability> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TrainId.eq(null));
                train_AvailabilityQuery = queryBuilder.build();
            }
        }
        Query<TrainAvailability> query = train_AvailabilityQuery.forCurrentThread();
        query.setParameter(0, TrainId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTrainDao().getAllColumns());
            builder.append(" FROM TrainAvailability T");
            builder.append(" LEFT JOIN Train T0 ON T.\"TrainId\"=T0.\"Id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TrainAvailability loadCurrentDeep(Cursor cursor, boolean lock) {
        TrainAvailability entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Train Train = loadCurrentOther(daoSession.getTrainDao(), cursor, offset);
        entity.setTrain(Train);

        return entity;    
    }

    public TrainAvailability loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TrainAvailability> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TrainAvailability> list = new ArrayList<TrainAvailability>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TrainAvailability> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TrainAvailability> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
