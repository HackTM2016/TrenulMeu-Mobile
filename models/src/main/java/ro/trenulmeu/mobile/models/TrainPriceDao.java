package ro.trenulmeu.mobile.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import ro.trenulmeu.mobile.models.TrainPrice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TrainPrice".
*/
public class TrainPriceDao extends AbstractDao<TrainPrice, Long> {

    public static final String TABLENAME = "TrainPrice";

    /**
     * Properties of entity TrainPrice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "Id");
        public final static Property TypeId = new Property(1, Long.class, "TypeId", false, "");
        public final static Property OperatorId = new Property(2, Long.class, "OperatorId", false, "");
        public final static Property Service = new Property(3, String.class, "Service", false, "Service");
        public final static Property KmFrom = new Property(4, Integer.class, "KmFrom", false, "KmFrom");
        public final static Property KmTo = new Property(5, Integer.class, "KmTo", false, "KmTo");
        public final static Property Price = new Property(6, Float.class, "Price", false, "Price");
    };

    private DaoSession daoSession;


    public TrainPriceDao(DaoConfig config) {
        super(config);
    }
    
    public TrainPriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TrainPrice\" (" + //
                "\"Id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"\" INTEGER," + // 1: TypeId
                "\"\" INTEGER," + // 2: OperatorId
                "\"Service\" TEXT," + // 3: Service
                "\"KmFrom\" INTEGER," + // 4: KmFrom
                "\"KmTo\" INTEGER," + // 5: KmTo
                "\"Price\" REAL);"); // 6: Price
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TrainPrice\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrainPrice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long TypeId = entity.getTypeId();
        if (TypeId != null) {
            stmt.bindLong(2, TypeId);
        }
 
        Long OperatorId = entity.getOperatorId();
        if (OperatorId != null) {
            stmt.bindLong(3, OperatorId);
        }
 
        String Service = entity.getService();
        if (Service != null) {
            stmt.bindString(4, Service);
        }
 
        Integer KmFrom = entity.getKmFrom();
        if (KmFrom != null) {
            stmt.bindLong(5, KmFrom);
        }
 
        Integer KmTo = entity.getKmTo();
        if (KmTo != null) {
            stmt.bindLong(6, KmTo);
        }
 
        Float Price = entity.getPrice();
        if (Price != null) {
            stmt.bindDouble(7, Price);
        }
    }

    @Override
    protected void attachEntity(TrainPrice entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrainPrice readEntity(Cursor cursor, int offset) {
        TrainPrice entity = new TrainPrice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // TypeId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // OperatorId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Service
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // KmFrom
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // KmTo
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6) // Price
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrainPrice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setOperatorId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setService(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKmFrom(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setKmTo(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrainPrice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrainPrice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTrainTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTrainOperatorDao().getAllColumns());
            builder.append(" FROM TrainPrice T");
            builder.append(" LEFT JOIN TrainType T0 ON T.\"\"=T0.\"Id\"");
            builder.append(" LEFT JOIN TrainOperator T1 ON T.\"\"=T1.\"Id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TrainPrice loadCurrentDeep(Cursor cursor, boolean lock) {
        TrainPrice entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TrainType TrainType = loadCurrentOther(daoSession.getTrainTypeDao(), cursor, offset);
        entity.setTrainType(TrainType);
        offset += daoSession.getTrainTypeDao().getAllColumns().length;

        TrainOperator Operator = loadCurrentOther(daoSession.getTrainOperatorDao(), cursor, offset);
        entity.setOperator(Operator);

        return entity;    
    }

    public TrainPrice loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TrainPrice> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TrainPrice> list = new ArrayList<TrainPrice>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TrainPrice> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TrainPrice> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
